<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[FLY in Light]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://www.flyinlight.com/"/>
  <updated>2015-08-16T17:06:15.000Z</updated>
  <id>https://www.flyinlight.com/</id>
  
  <author>
    <name><![CDATA[睡着的咖啡豆zZ]]></name>
    <email><![CDATA[casafang2015@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[在Mac安装Ruby指南]]></title>
    <link href="https://www.flyinlight.com/2015/08/17/%E5%9C%A8Mac%E5%AE%89%E8%A3%85Ruby%E6%8C%87%E5%8D%97/"/>
    <id>https://www.flyinlight.com/2015/08/17/在Mac安装Ruby指南/</id>
    <published>2015-08-16T16:51:45.000Z</published>
    <updated>2015-08-16T17:06:15.000Z</updated>
    <content type="html"><![CDATA[<p>cocoapods的安装需要Ruby环境，特此做个笔记。<br><a id="more"></a></p>
<h1 id="系统需求">系统需求</h1><p>首先确定操作系统环境，不建议在 Windows 上面搞，所以你需要用:</p>
<ul>
<li>Mac OS X </li>
<li>任意 Linux 发行版本(Ubuntu,CentOS, Redhat, ArchLinux …)</li>
</ul>
<pre><code>强烈新手使用 Ubuntu 省掉不必要的麻烦！
</code></pre><p>以下代码区域，带有 <strong>$</strong> 打头的表示需要在控制台（终端）下面执行（不包括 <strong>$</strong> 符号）</p>
<h2 id="步骤0_－_安装系统需要的包">步骤0 － 安装系统需要的包</h2><pre><code><span class="preprocessor"># For Mac </span>
<span class="preprocessor"># 先安装 [Xcode](http://developer.apple.com/xcode/) 开发工具，它将帮你安装好 Unix 环境需要的开发包</span>
</code></pre><h2 id="步骤1_－_安装_RVM">步骤1 － 安装 RVM</h2><p>RVM 是干什么的这里就不解释了，后面你将会慢慢搞明白。</p>
<pre><code>$ curl -L <span class="string">https:</span><span class="comment">//get.rvm.io | bash -s stable</span>
</code></pre><p>期间可能会问你sudo管理员密码，以及自动通过homebrew安装依赖包，等待一段时间后就可以成功安装好 RVM。</p>
<p>然后，载入 RVM 环境（新开 Termal 就不用这么做了，会自动重新载入的）</p>
<pre><code><span class="variable">$ </span>source ~<span class="regexp">/.rvm/scripts</span><span class="regexp">/rvm</span>
</code></pre><p>检查一下是否安装正确</p>
<pre><code><span class="variable">$ </span>rvm -v
rvm <span class="number">1.22</span>.<span class="number">17</span> (stable) by <span class="constant">Wayne E.</span> <span class="constant">Seguin </span>&lt;wayneeseguin<span class="variable">@gmail</span>.com&gt;, <span class="constant">Michal Papis </span>&lt;mpapis<span class="variable">@gmail</span>.com&gt; [<span class="symbol">https:</span>/<span class="regexp">/rvm.io/</span>]
</code></pre><h2 id="步骤2_－_用_RVM_安装_Ruby_环境">步骤2 － 用 RVM 安装 Ruby 环境</h2><pre><code>$ rvm install <span class="number">2.0</span><span class="number">.0</span>
</code></pre><p>同样继续等待漫长的下载，编译过程，完成以后，Ruby, Ruby Gems 就安装好了。</p>
<h2 id="步骤3_－_设置_Ruby_版本">步骤3 － 设置 Ruby 版本</h2><p>RVM 装好以后，需要执行下面的命令将指定版本的 Ruby 设置为系统默认版本</p>
<pre><code>$ rvm <span class="number">2.0</span><span class="number">.0</span> --<span class="keyword">default</span>
</code></pre><p>同样，也可以用其他版本号，前提是你有用 rvm install 安装过那个版本</p>
<p>这个时候你可以测试是否正确</p>
<pre><code>$ ruby -v
ruby <span class="number">2.0</span><span class="number">.0</span>p247 (<span class="number">2013</span>-<span class="number">06</span>-<span class="number">27</span> revision <span class="number">41674</span>) [x86_64-darwin13<span class="number">.0</span><span class="number">.0</span>]

$ gem -v
<span class="number">2.1</span><span class="number">.6</span>
</code></pre><p>这有可能是因为Ruby的默认源使用的是cocoapods.org，国内访问这个网址有时候会有问题，网上的一种解决方案是将远替换成淘宝的，替换方式如下：</p>
<pre><code><span class="variable">$gem</span> source -r https://rubygems.org/
<span class="variable">$gem</span> source -a https://ruby.taobao.org
</code></pre><p> 要想验证是否替换成功了，可以执行：</p>
<pre><code>$ gem sources <span class="operator">-l</span>  
</code></pre><p>正常的输出结果：</p>
<pre><code>CURRENT SOURCES　　　　　　　　　　　　
<span class="label">http:</span>//ruby.taobao<span class="preprocessor">.org</span>/　　　　　　　　　　　　
</code></pre><p>到这里就已经把Ruby环境成功的安装到了Mac OS X上，接下来就可以进行相应的开发使用了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>cocoapods的安装需要Ruby环境，特此做个笔记。<br>]]>
    
    </summary>
    
      <category term="iOS" scheme="https://www.flyinlight.com/tags/iOS/"/>
    
      <category term="mac" scheme="https://www.flyinlight.com/tags/mac/"/>
    
      <category term="ruby" scheme="https://www.flyinlight.com/tags/ruby/"/>
    
      <category term="mac" scheme="https://www.flyinlight.com/categories/mac/"/>
    
      <category term="ruby" scheme="https://www.flyinlight.com/categories/mac/ruby/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于iOS证书那些事]]></title>
    <link href="https://www.flyinlight.com/2015/08/16/%E5%85%B3%E4%BA%8EiOS%E8%AF%81%E4%B9%A6%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>https://www.flyinlight.com/2015/08/16/关于iOS证书那些事/</id>
    <published>2015-08-16T13:49:25.000Z</published>
    <updated>2015-08-18T14:23:50.000Z</updated>
    <content type="html"><![CDATA[<p>作为一名iOS开发者，开发者账号和iOS真机测试证书那些事，都是每个开发者必经的痛并快乐着的路。作为android开发者，可以方便的邀请小伙伴测试，但是作为一名iOS开发者，却要苦逼的向小伙伴要UDID，生成新的证书，才能完成测试。<br><a id="more"></a></p>
<h1 id="相关基础">相关基础</h1><hr>
<h2 id="Xcode相关名词">Xcode相关名词</h2><p><strong>Keychain</strong></p>
<p>MAC下用于存储和管理密钥等私密信息的工具.</p>
<p><strong>Identifiers / Bundle ID / App ID</strong></p>
<p>这是应用的唯一标识.</p>
<p><strong>Device UUID</strong></p>
<p>这是设备的唯一标识.</p>
<p><strong>Provisioning Profiles</strong></p>
<p>这就是我们最后要生成的 Profiles, 它记录了 App ID, UUID 和其所信任的证书.</p>
<p>当Xcode要把一个应用部署到真机上时, 会作相应检验:</p>
<ul>
<li>Keychain中是否有相匹配的有效证书? </li>
<li>Profiles是否有效? </li>
<li>要部署的App的App ID是否与Profiles记录的App ID相匹配?</li>
<li>UUID是否相匹配?</li>
</ul>
<p>只有在所有检验都通过了, 才能部署到真机上.</p>
<h1 id="相关证书的发布">相关证书的发布</h1><hr>
<h2 id="关于证书">关于证书</h2><h3 id="CSR文件">CSR文件</h3><p>首先通过钥匙串访问——证书助理——从证书颁发机构请求证书<br><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer1.1.jpg" alt="1.1"><br>填写证书信息（邮箱，常用名称，存储到磁盘）——存储为（自定义名称.certSigningReuqest，简称CSR文件，只是为了提交到苹果开发者账号中，然后就没用了）到本地<br><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer1.2.jpg" alt="1.2"></p>
<h3 id="APPID">APPID</h3><ul>
<li>App IDs——设置应用的bundleID，也可使用＊通配符</li>
</ul>
<p>新建项目的appID。<br><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer2.1.jpg" alt="2.1"></p>
<p><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer2.2.jpg" alt="2.2"></p>
<p><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer2.3.jpg" alt="2.3"></p>
<p><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer2.4.jpg" alt="2.4"></p>
<p><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer2.5.jpg" alt="2.5"></p>
<h3 id="development证书">development证书</h3><ul>
<li>Development——开发证书，用于本地开发</li>
<li>Production——生产证书，用于发布使用</li>
</ul>
<p>苹果开发者账号中，创建证书（Development和Production）——上传CSR文件——下载证书运行 （ xxx.cer文件）</p>
<p><strong>注意：只有在当前电脑中生成本地生成证书，上传到苹果开发账号，然后下载cer文件运行后，钥匙串中才有证书以及对应的秘钥</strong></p>
<p><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer3.1.jpg" alt="3.1"></p>
<p><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer3.2.jpg" alt="3.2"></p>
<p><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer3.3.jpg" alt="3.3"></p>
<h3 id="development配置文件">development配置文件</h3><p>配置文件：需要选择证书，选择APP IDs，选择Device等，生成配置文件，下载到本地运行</p>
<ul>
<li>development——开发的时候，Xcode可以识别项目和测试设备，真机调试</li>
<li>distribution——发布的时候，Xcode可以validate项目和submit</li>
</ul>
<p><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer4.1.jpg" alt="4.1"></p>
<p><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer4.2.jpg" alt="4.2"></p>
<p><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer4.3.jpg" alt="4.3"></p>
<p><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer4.4.jpg" alt="4.4"></p>
<h3 id="distribution配置文件">distribution配置文件</h3><p><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer5.1.jpg" alt="5.1"></p>
<h3 id="密钥">密钥</h3><p>如果开发者B，登录开发者账号，下载证书（cer文件）运行，<strong>只有证书没有秘钥，是不能正常使用的</strong></p>
<p><img src="http://7xl71o.com1.z0.glb.clouddn.com/cer6.1.jpg" alt="6.1"></p>
<h1 id="Xcode添加开发者账号">Xcode添加开发者账号</h1><p>Xcode工具栏——Xcode——Preferences——Accounts—— 左下角 Add Apple ID——输入苹果账号，密码</p>
<p>在项目的target——general——team中可以选择项目对应的开发者账号</p>
<p>（当bulid的新设备未在开发者账号的devices添加devicetoken的时候，xcode会进行提示无法识别设备，可以在xcode中fix issue，xcode会自动在开发者账号中，创建一个新的针对这个设备的Provisioning Profiles配置文件，然后安装到本地，唯一的不好就是开发者账号的配置文件下会有很多零散的配置文件）</p>
<h1 id="关于app的发布">关于app的发布</h1><p>修改项目的version，以及项目的版本debug为release</p>
<p>（debug改为release后需要进行测试，一些第三方类库可能release版会有一些不兼容）</p>
<p>Product——Scheme——Edit Scheme 修改 Run/Test/Analyze/Archive 的build configuration  （发布的时候，只需要Archive就可以了）<br>苹果开发者中心——iTunes Connect——我的APP——创建/选择应用——填写基本修改/添加新版本（构建版本）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>作为一名iOS开发者，开发者账号和iOS真机测试证书那些事，都是每个开发者必经的痛并快乐着的路。作为android开发者，可以方便的邀请小伙伴测试，但是作为一名iOS开发者，却要苦逼的向小伙伴要UDID，生成新的证书，才能完成测试。<br>]]>
    
    </summary>
    
      <category term="certificates" scheme="https://www.flyinlight.com/tags/certificates/"/>
    
      <category term="developer" scheme="https://www.flyinlight.com/tags/developer/"/>
    
      <category term="iOS" scheme="https://www.flyinlight.com/tags/iOS/"/>
    
      <category term="iOS" scheme="https://www.flyinlight.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown 语法大全]]></title>
    <link href="https://www.flyinlight.com/2015/08/14/markdown-%E8%AF%AD%E6%B3%95%E5%A4%A7%E5%85%A8/"/>
    <id>https://www.flyinlight.com/2015/08/14/markdown-语法大全/</id>
    <published>2015-08-14T04:29:23.000Z</published>
    <updated>2015-08-14T05:09:35.000Z</updated>
    <content type="html"><![CDATA[<p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。[1]这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。<br>——维基百科<br><a id="more"></a></p>
<h2 id="Markdown简介">Markdown简介</h2><hr>
<p>Markdown 的目标是实现「易读易写」。</p>
<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。</p>
<h3 id="兼容HTML">兼容HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p>
<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>
<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>
<p>要制约的只有一些 HTML 区块元素――比如\<div\>,\<table\>,\<pre\>,\<p\> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的\<p\>标签。</p\></p\></pre\></table\></div\></p>
<p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p>
<pre><code>这是一个普通段落。

<span class="tag">&lt;<span class="title">table</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>

这是另一个普通段落。
</code></pre><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的*强调*会没有效果。</p>
<p>HTML 的区段（行内）标签如 \<span\>、\<cite\>、\<del\> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 \<a\> 或 \<img\> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</img\></a\></del\></cite\></span\></p>
<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>
<h3 id="特殊字符自动转换">特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 \&lt; 和 \&amp;。</p>
<p>&amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT\&amp;T」。而网址中的 &amp; 字符也要转换。比如你要链接到：</p>
<p><a href="http://images.google.com/images?num=30&amp;q=larry+bird" target="_blank" rel="external">http://images.google.com/images?num=30&amp;q=larry+bird</a></p>
<p>你必须要把网址转换写为：</p>
<p><a href="http://images.google.com/images?num=30\&amp;q=larry+bird" target="_blank" rel="external">http://images.google.com/images?num=30\&amp;q=larry+bird</a></p>
<p>才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p>
<p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 \&amp;。</p>
<p>所以你如果要在文档中插入一个版权符号©，你可以这样写：</p>
<pre><code>&amp;<span class="keyword">copy</span>;
</code></pre><p>Markdown 会保留它不动。而若你写：</p>
<pre><code><span class="built_in">AT</span>&amp;T
</code></pre><p>Markdown 就会将它转为：</p>
<pre><code>AT&amp;amp<span class="comment">;T</span>
</code></pre><p>类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p>
<pre><code><span class="number">4</span> &lt; <span class="number">5</span>
</code></pre><p>Markdown 将会把它转换为：</p>
<pre><code><span class="number">4</span> &amp;lt; <span class="number">5</span>
</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p>
<h2 id="区块元素">区块元素</h2><hr>
<h3 id="段落和换行">段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>
<p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <br> 标签。</p>
<p>如果你确实想要依赖 Markdown 来插入 <br> 标签的话，在插入处先按入两个以上的空格然后回车。</p>
<p>的确，需要多费点事（多加空格）来产生 <br> ，但是简单地「每个换行都转换为 <br>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。</p>
<h3 id="标题">标题</h3><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p>
<p>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p>
<pre><code><span class="header">This is an H1
=============</span>

<span class="header">This is an H2
-------------</span>
</code></pre><p>任何数量的 = 和 - 都可以有效果。</p>
<p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p>
<pre><code><span class="preprocessor"># 这是 H1</span>

<span class="preprocessor">## 这是 H2</span>

<span class="preprocessor">###### 这是 H6</span>
</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>
<pre><code><span class="preprocessor"># 这是 H1 #</span>

<span class="preprocessor">## 这是 H2 ##</span>

<span class="preprocessor">### 这是 H3 ######</span>
</code></pre><h3 id="区块引用Blockquotes">区块引用Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lo<span class="comment">rem ipsum dolor sit amet,</span>
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla <span class="flow">in</span>, laoreet vitae, risus.
&gt; 
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lo<span class="comment">rem ipsum dolor sit amet,</span>
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla <span class="flow">in</span>, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p>
<pre><code> This <span class="keyword">is</span> <span class="keyword">the</span> <span class="keyword">first</span> level <span class="keyword">of</span> quoting.
&gt;
&gt; &gt; This <span class="keyword">is</span> nested blockquote.
&gt;
&gt; Back <span class="keyword">to</span> <span class="keyword">the</span> <span class="keyword">first</span> level.
</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<pre><code>&gt; <span class="comment">## 这是一个标题。</span>
&gt; 
&gt; <span class="number">1</span>.   这是第一行列表项。
&gt; <span class="number">2</span>.   这是第二行列表项。
&gt; 
&gt; 给出一些例子代码：
&gt; 
&gt;     <span class="built_in">return</span> shell_<span class="built_in">exec</span>(<span class="string">"echo <span class="variable">$input</span> | <span class="variable">$markdown_script</span>"</span>);
</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</p>
<h3 id="列表">列表</h3><p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号、加号或是减号作为列表标记：</p>
<pre><code><span class="bullet">*   </span>Red
<span class="bullet">*   </span>Green
<span class="bullet">*   </span>Blue
</code></pre><p>等同于：</p>
<pre><code><span class="bullet">+   </span>Red
<span class="bullet">+   </span>Green
<span class="bullet">+   </span>Blue
</code></pre><p>也等同于：</p>
<pre><code>-<span class="ruby">   <span class="constant">Red</span>
</span>-<span class="ruby">   <span class="constant">Green</span>
</span>-<span class="ruby">   <span class="constant">Blue</span></span>
</code></pre><p>有序列表则使用数字接着一个英文句点：</p>
<pre><code><span class="number">1.</span>  Bird
<span class="number">2.</span>  McHale
<span class="number">3.</span>  Parish
</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p>
<pre><code><span class="tag">&lt;<span class="title">ol</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>Bird<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>McHale<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>Parish<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ol</span>&gt;</span>
</code></pre><p>如果你的列表标记写成：</p>
<pre><code><span class="number">1.</span>  Bird
<span class="number">1.</span>  McHale
<span class="number">1.</span>  Parish
</code></pre><p>或甚至是：</p>
<pre><code><span class="number">3.</span> Bird
<span class="number">1.</span> McHale
<span class="number">8.</span> Parish
</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>
<p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p>
<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>
<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>
<pre><code>*   Lo<span class="comment">rem ipsum dolor sit amet, consectetuer adipiscing elit.</span>
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla <span class="flow">in</span>, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>但是如果你懒，那也行：</p>
<pre><code>*   Lo<span class="comment">rem ipsum dolor sit amet, consectetuer adipiscing elit.</span>
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla <span class="flow">in</span>, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 </p><p> 标签包起来，举例来说：</p>
<pre><code><span class="bullet">*   </span>Bird
<span class="bullet">*   </span>Magic
</code></pre><p>会被转换为：</p>
<pre><code><span class="tag">&lt;<span class="title">ul</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>Bird<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span>Magic<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</code></pre><p>但是这个：</p>
<pre><code><span class="bullet">*   </span>Bird

<span class="bullet">*   </span>Magic
</code></pre><p>会被转换为：</p>
<pre><code><span class="tag">&lt;<span class="title">ul</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>Bird<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>Magic<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p>
<pre><code><span class="number">1</span>.  This is a list item with two paragraphs. Lo<span class="comment">rem ipsum dolor</span>
sit amet, consectetuer adipiscing elit. Aliquam hendrerit
mi posuere lectus.

Vestibulum enim wisi, viverra nec, fringilla <span class="flow">in</span>, laoreet
vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
sit amet velit.

<span class="number">2</span>.  Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p>
<pre><code>*   This <span class="keyword">is</span> a <span class="type">list</span> <span class="property">item</span> <span class="keyword">with</span> two <span class="property">paragraphs</span>.

This <span class="keyword">is</span> <span class="keyword">the</span> <span class="keyword">second</span> <span class="property">paragraph</span> <span class="keyword">in</span> <span class="keyword">the</span> <span class="type">list</span> <span class="property">item</span>. You're
only required <span class="keyword">to</span> indent <span class="keyword">the</span> <span class="keyword">first</span> line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another <span class="property">item</span> <span class="keyword">in</span> <span class="keyword">the</span> same <span class="type">list</span>.
</code></pre><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p>
<pre><code>*   A list item with a blockquote:

    &gt; This <span class="keyword">is</span> a blockquote
    &gt; <span class="keyword">inside</span> a list item.
</code></pre><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p>
<pre><code><span class="keyword">*</span>   一列表项包含一个列表区块：

        <span class="variable">&lt;代码写在这&gt;</span>
</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法</p>
<pre><code><span class="number">1986</span>. What <span class="tag">a</span> great season.
</code></pre><p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</p>
<pre><code><span class="number">1986</span>\. What <span class="tag">a</span> great season.
</code></pre><h3 id="代码区块">代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 \<pre> 和 \<code> 标签来把代码区块包起来。</code></pre></p>
<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>
<pre><code>这是一个普通段落：

    这是一个代码区块。
</code></pre><p>Markdown 会转换成：</p>
<pre><code><span class="tag">&lt;<span class="title">p</span>&gt;</span>这是一个普通段落：<span class="tag">&lt;/<span class="title">p</span>&gt;</span>

<span class="tag">&lt;<span class="title">pre</span>&gt;</span><span class="tag">&lt;<span class="title">code</span>&gt;</span>这是一个代码区块。
<span class="tag">&lt;/<span class="title">code</span>&gt;</span><span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
</code></pre><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p>
<pre><code>Here <span class="keyword">is</span> an example <span class="keyword">of</span> <span class="constant">AppleScript</span>:

    <span class="keyword">tell</span> <span class="type">application</span> <span class="string">"Foo"</span>
        <span class="command">beep</span>
    <span class="keyword">end</span> <span class="keyword">tell</span>
</code></pre><p>会被转换为：</p>
<pre><code>&lt;p&gt;Here <span class="keyword">is</span> an example <span class="keyword">of</span> <span class="constant">AppleScript</span>:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="keyword">tell</span> <span class="type">application</span> <span class="string">"Foo"</span>
    <span class="command">beep</span>
<span class="keyword">end</span> <span class="keyword">tell</span>
&lt;/code&gt;&lt;/pre&gt;
</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>
<p>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"footer"</span>&gt;
  &amp;<span class="keyword">copy</span>; <span class="number">2004</span> Foo Corporation
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>会被转换为：</p>
<pre><code>&lt;<span class="keyword">pre</span>&gt;&lt;code&gt;&amp;<span class="keyword">lt</span>;div class=<span class="string">"footer"</span>&amp;gt;
    &amp;amp;<span class="built_in">copy</span>; <span class="number">2004</span> Foo Corporation
&amp;<span class="keyword">lt</span>;/div&amp;gt;
&lt;/code&gt;&lt;/<span class="keyword">pre</span>&gt;
</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p>
<h3 id="分隔线">分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<pre><code><span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span>

<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>

<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>

- - -

---------------------------------------
</code></pre><h2 id="区段元素">区段元素</h2><hr>
<h3 id="链接">链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p>
<p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>
<p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>
<pre><code>This is [<span class="link_label">an example</span>](<span class="link_url">http://example.com/ "Title"</span>) inline link.

[<span class="link_label">This link</span>](<span class="link_url">http://example.net/</span>) has no title attribute.
</code></pre><p>会产生：</p>
<pre><code><span class="tag">&lt;<span class="title">p</span>&gt;</span>This is <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://example.com/"</span> <span class="attribute">title</span>=<span class="value">"Title"</span>&gt;</span>
an example<span class="tag">&lt;/<span class="title">a</span>&gt;</span> inline link.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>

<span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://example.net/"</span>&gt;</span>This link<span class="tag">&lt;/<span class="title">a</span>&gt;</span> has no
title attribute.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
</code></pre><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>
<pre><code>See my [<span class="link_label">About</span>](<span class="link_url">/about/</span>) page for details.
</code></pre><p>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>
<pre><code>This is [<span class="link_label">an example</span>][<span class="link_reference">id</span>] reference-style link.
</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p>
<pre><code>This <span class="keyword">is</span> [an example] [<span class="property">id</span>] <span class="keyword">reference</span>-style link.
</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>
<pre><code><span class="attr_selector">[id]</span>: <span class="rule"><span class="attribute">http</span>:<span class="value">//example.com/  <span class="string">"Optional Title Here"</span></span></span>
</code></pre><p>链接内容定义的形式为：</p>
<ul>
<li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>接着一个冒号</li>
<li>接着一个以上的空格或制表符</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li>
</ul>
<p>下面这三种链接的定义都是相同：</p>
<pre><code>[<span class="link_reference">foo</span>]:<span class="link_url"> http://example.com/  "Optional Title Here"</span>
[<span class="link_reference">foo</span>]:<span class="link_url"> http://example.com/  'Optional Title Here'</span>
[<span class="link_reference">foo</span>]:<span class="link_url"> http://example.com/  (Optional Title Here)</span>
</code></pre><p>请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p>
<p>链接网址也可以用方括号包起来：</p>
<pre><code>[<span class="link_reference">id</span>]:<span class="link_url"> "Optional Title Here"</span>
</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p>
<pre><code>[id]<span class="symbol">:</span> <span class="symbol">http:</span>/<span class="regexp">/example.com/longish</span><span class="regexp">/path/to</span><span class="regexp">/resource/here</span>
    <span class="string">"Optional Title Here"</span>
</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p>
<p>链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：</p>
<pre><code>[<span class="link_label">link text</span>][<span class="link_reference">a</span>]
[<span class="link_label">link text</span>][<span class="link_reference">A</span>]
</code></pre><p>隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p>
<pre><code>[<span class="link_label">Google</span>][<span class="link_reference"></span>]
</code></pre><p>然后定义链接内容：</p>
<pre><code>[<span class="link_reference">Google</span>]:<span class="link_url"> http://google.com/</span>
</code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p>
<pre><code>Visit [<span class="link_label">Daring Fireball</span>][<span class="link_reference"></span>] for more information.
</code></pre><p>然后接着定义链接</p>
<pre><code>[<span class="link_reference">Daring Fireball</span>]:<span class="link_url"> http://daringfireball.net/</span>
</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p>
<p>下面是一个参考式链接的范例：</p>
<pre><code><span class="name">I</span> <span class="atom">get</span> <span class="number">10</span> <span class="atom">times</span> <span class="atom">more</span> <span class="atom">traffic</span> <span class="atom">from</span> [<span class="name">Google</span>] [<span class="number">1</span>] <span class="atom">than</span> <span class="atom">from</span>
[<span class="name">Yahoo</span>] [<span class="number">2</span>] <span class="atom">or</span> [<span class="name">MSN</span>] [<span class="number">3</span>].

  [<span class="number">1</span>]: <span class="atom">http</span>://<span class="atom">google</span>.<span class="atom">com</span>/        <span class="string">"Google"</span>
  [<span class="number">2</span>]: <span class="atom">http</span>://<span class="atom">search</span>.<span class="atom">yahoo</span>.<span class="atom">com</span>/  <span class="string">"Yahoo Search"</span>
  [<span class="number">3</span>]: <span class="atom">http</span>://<span class="atom">search</span>.<span class="atom">msn</span>.<span class="atom">com</span>/    <span class="string">"MSN Search"</span>
</code></pre><p>如果改成用链接名称的方式写：</p>
<pre><code>I get 10 times more traffic from [<span class="link_label">Google</span>][<span class="link_reference"></span>] than from
[<span class="link_label">Yahoo</span>][<span class="link_reference"></span>] or [<span class="link_label">MSN</span>][<span class="link_reference"></span>].

  [google]: http://google.com/        "Google"
  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
  [msn]:    http://search.msn.com/    "MSN Search"
</code></pre><p>上面两种写法都会产生下面的 HTML。</p>
<pre><code>&lt;p&gt;I <span class="built_in">get</span> <span class="number">10</span> times more traffic <span class="built_in">from</span> &lt;<span class="operator">a</span> href=<span class="string">"http://google.com/"</span>
title=<span class="string">"Google"</span>&gt;Google&lt;/<span class="operator">a</span>&gt; than <span class="built_in">from</span>
&lt;<span class="operator">a</span> href=<span class="string">"http://search.yahoo.com/"</span> title=<span class="string">"Yahoo Search"</span>&gt;Yahoo&lt;/<span class="operator">a</span>&gt;
<span class="operator">or</span> &lt;<span class="operator">a</span> href=<span class="string">"http://search.msn.com/"</span> title=<span class="string">"MSN Search"</span>&gt;MSN&lt;/<span class="operator">a</span>&gt;.&lt;/p&gt;
</code></pre><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p>
<pre><code>I get 10 times more traffic from [<span class="link_label">Google</span>](<span class="link_url">http://google.com/ "Google"</span>)
than from [<span class="link_label">Yahoo</span>](<span class="link_url">http://search.yahoo.com/ "Yahoo Search"</span>) or
[<span class="link_label">MSN</span>](<span class="link_url">http://search.msn.com/ "MSN Search"</span>).
</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p>
<p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>
<h3 id="强调">强调</h3><p>Markdown 使用星号（<em>）和底线（_）作为标记强调字词的符号，被 </em> 或 <em> 包围的字词会被转成用 \<em> 标签包围，用两个 * 或 </em> 包起来的话，则会被转成 \<strong>，例如：</strong></em></p>
<pre><code><span class="keyword">*</span>single asterisks<span class="keyword">*</span>

_single underscores_

<span class="keyword">*</span><span class="keyword">*</span>double asterisks<span class="keyword">*</span><span class="keyword">*</span>

__double underscores__
</code></pre><p>会转成：</p>
<pre><code><span class="tag">&lt;<span class="title">em</span>&gt;</span>single asterisks<span class="tag">&lt;/<span class="title">em</span>&gt;</span>

<span class="tag">&lt;<span class="title">em</span>&gt;</span>single underscores<span class="tag">&lt;/<span class="title">em</span>&gt;</span>

<span class="tag">&lt;<span class="title">strong</span>&gt;</span>double asterisks<span class="tag">&lt;/<span class="title">strong</span>&gt;</span>

<span class="tag">&lt;<span class="title">strong</span>&gt;</span>double underscores<span class="tag">&lt;/<span class="title">strong</span>&gt;</span>
</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p>
<p>强调也可以直接插在文字中间：</p>
<pre><code>un<span class="keyword">*</span>frigging<span class="keyword">*</span>believable
</code></pre><p>但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。</p>
<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>
<pre><code><span class="string">\*this</span> text <span class="keyword">is</span> surrounded <span class="keyword">by</span> literal asterisks<span class="string">\*</span>
</code></pre><h3 id="代码">代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</p>
<pre><code><span class="keyword">Use</span> the `printf()` <span class="function"><span class="keyword">function</span>.</span>
</code></pre><p>会产生：</p>
<pre><code><span class="tag">&lt;<span class="title">p</span>&gt;</span>Use the <span class="tag">&lt;<span class="title">code</span>&gt;</span>printf()<span class="tag">&lt;/<span class="title">code</span>&gt;</span> function.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>
<pre><code><span class="escape">``</span>There is <span class="literal">a</span> literal backtick (<span class="escape">`)</span> here.<span class="escape">``</span>
</code></pre><p>这段语法会产生：</p>
<pre><code><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">code</span>&gt;</span>There is a literal backtick (`) here.<span class="tag">&lt;/<span class="title">code</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
</code></pre><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p>
<pre><code>A single backtick <span class="keyword">in</span> <span class="tag">a</span> <span class="tag">code</span> <span class="tag">span</span>: `` ` ``

A backtick-delimited string <span class="keyword">in</span> <span class="tag">a</span> <span class="tag">code</span> <span class="tag">span</span>: `` `foo` ``
</code></pre><p>会产生：</p>
<pre><code>&lt;p&gt;A single backtick <span class="keyword">in</span> <span class="tag">a</span> <span class="tag">code</span> <span class="tag">span</span>: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string <span class="keyword">in</span> <span class="tag">a</span> <span class="tag">code</span> <span class="tag">span</span>: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre><p>在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p>
<pre><code>Please don't <span class="operator"><span class="keyword">use</span> <span class="keyword">any</span> <span class="string">`&lt;blink&gt;`</span> tags.</span>
</code></pre><p>转为：</p>
<pre><code><span class="variable">&lt;p&gt;</span>Please don't use <span class="literal">any</span> <span class="variable">&lt;code&gt;</span><span class="variable">&lt;blink&gt;</span><span class="variable">&lt;/code&gt;</span> tags.<span class="variable">&lt;/p&gt;</span>
</code></pre><p>你也可以这样写：</p>
<pre><code>`<span class="javascript">&amp;#<span class="number">8212</span>;</span>` <span class="keyword">is</span> the decimal-encoded equivalent <span class="keyword">of</span> `<span class="javascript">&amp;mdash;</span>`.
</code></pre><p>以产生：</p>
<pre><code><span class="variable">&lt;p&gt;</span><span class="variable">&lt;code&gt;</span>&amp;amp;<span class="comment">#8212;&lt;/code&gt; is the decimal-encoded</span>
equivalent of <span class="variable">&lt;code&gt;</span>&amp;amp;mdash;<span class="variable">&lt;/code&gt;</span>.<span class="variable">&lt;/p&gt;</span>
</code></pre><h3 id="图片">图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p>
<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p>
<p>行内式的图片语法看起来像是：</p>
<pre><code>![<span class="link_label">Alt text</span>](<span class="link_url">/path/to/img.jpg</span>)

![<span class="link_label">Alt text</span>](<span class="link_url">/path/to/img.jpg "Optional title"</span>)
</code></pre><p>详细叙述如下：</p>
<ul>
<li>一个惊叹号 !</li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</li>
</ul>
<p>参考式的图片语法则长得像这样：</p>
<pre><code>![<span class="link_label">Alt text</span>][<span class="link_reference">id</span>]
</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>
<pre><code>[<span class="property">id</span>]: url/<span class="keyword">to</span>/image  <span class="string">"Optional title attribute"</span>
</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <img> 标签。</p>
<h2 id="其它">其它</h2><hr>
<h3 id="反斜杠">反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：</em></p>
<pre><code>\<span class="keyword">*</span>literal asterisks\<span class="keyword">*</span>
</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<pre><code>\   反斜线
`   反引号
<span class="bullet">*   </span>星号
_   底线
{}  花括号
[]  方括号
()  括弧
<span class="header">#   井字号</span>
<span class="bullet">+   </span>加号
<span class="bullet">-   </span>减号
.   英文句点
!   惊叹号
</code></pre><h3 id="自动链接">自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>
<pre><code>&lt;<span class="string">http:</span><span class="comment">//example.com/&gt;</span>
</code></pre><p>Markdown 会转为：</p>
<pre><code>&lt;<span class="tag">a</span> href=<span class="string">"http://example.com/"</span>&gt;http:<span class="comment">//example.com/&lt;/a&gt;</span>
</code></pre><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p>
<pre><code><span class="tag">&lt;address@example.com&gt;</span>
</code></pre><p>Markdown 会转成：</p>
<pre><code>&lt;<span class="keyword">a</span> href=<span class="string">"mailto:addre
</span>ss@example.<span class="keyword">co</span>
<span class="keyword">m</span><span class="string">"&gt;address@exa
</span>mple.<span class="keyword">com</span>&lt;/<span class="keyword">a</span>&gt;
</code></pre><p>在浏览器里面，这段字串（其实是 <a href="mailto:address@example.com" target="_blank" rel="external">address@example.com</a>）会变成一个可以点击的「address@example.com」链接。</p>
<p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。[1]这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。<br>——维基百科<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="https://www.flyinlight.com/tags/hexo/"/>
    
      <category term="markdown" scheme="https://www.flyinlight.com/tags/markdown/"/>
    
      <category term="hexo" scheme="https://www.flyinlight.com/categories/hexo/"/>
    
      <category term="markdown" scheme="https://www.flyinlight.com/categories/hexo/markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo 3.0搭建笔记]]></title>
    <link href="https://www.flyinlight.com/2015/08/13/hexo-3-0%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.flyinlight.com/2015/08/13/hexo-3-0搭建笔记/</id>
    <published>2015-08-13T13:01:16.000Z</published>
    <updated>2015-08-13T15:25:09.000Z</updated>
    <content type="html"><![CDATA[<p>一直想抽时间搭建一个自己的Hexo博客，苦于没有时间。今天这个念头又冒了出来，于是抽了些时间搭建了这个博客。作为一枚爱写文又追求逼格的程序猿，hexo的风格我非常喜欢。那么新博的第一篇就献给它。<br><a id="more"></a></p>
<h2 id="1-Hexo简介">1.Hexo简介</h2><p>hexo是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。虽然搭建花费了一些时间，但是一旦搭建完成，写文就变成了一种极简的享受。<br>比如Hexo的官方网站<a href="http://hexo.io" target="_blank" rel="external">http://hexo.io</a> 就是托管于github的pages服务上</p>
<h2 id="2-Hexo安装方法">2.Hexo安装方法</h2><h3 id="环境准备">环境准备</h3><ul>
<li>安装Node.js</li>
</ul>
<p>到<a href="https://nodejs.org" target="_blank" rel="external">Node.js</a>官网下载相应平台的<a href="https://nodejs.org/dist/v0.12.7/node-v0.12.7.pkg" target="_blank" rel="external">最新版本</a>，一路安装即可。</p>
<ul>
<li>通过npm安装Hexo</li>
<li>  $ npm install hexo-cli -g<br>  $ install hexo –save</li>
</ul>
<h2 id="3-Hexo配置方法">3.Hexo配置方法</h2><p>新建一个需要当做博客目录的文件夹</p>
<pre><code>$ <span class="built_in">mkdir</span> hexo
</code></pre><p>进去之后加入hexo主程序和安装npm</p>
<pre><code><span class="variable">$ </span>hexo init
<span class="variable">$ </span>npm install
</code></pre><p>文件夹注释</p>
<ul>
<li>scaffolds 工具模板</li>
<li>scripts hexo的功能js</li>
<li>source 博客资源文件夹</li>
<li>source/_drafts 草稿文件夹</li>
<li>source/_posts 文章文件夹</li>
<li>themes 存放皮肤的文件夹</li>
<li>themes/landscape 默认皮肤文件夹</li>
<li>_config.yml 全局配置文件</li>
<li>db.json json格式的静态常量数据库</li>
<li>_posts 目录：Hexo存放博客文章的文件夹</li>
<li>themes 目录：存放皮肤的文件夹，默认使用官方的主题 你也可以从 hexo主题页面 下载你喜欢的主题</li>
</ul>
<h3 id="配置hexo">配置hexo</h3><h4 id="Hexo全局配置">Hexo全局配置</h4><p>用文本编辑器修改<code>_config.yml</code>这个文件 大致如下 只需要自行修改几个 其他保持默认即可</p>
<p>通常需要修改站点名称 /URL格式 /归档设置 /disqus评论用户名 /部署配置 这几项就可以了 注意冒号后面都要添加一个半角空格 之后才是设置参数</p>
<p>自定义域名设置 在<code>source</code>我文件夹下面新建<code>CNAME</code>文件 里面写入你的自定义域名 并设置您的dns配置cname方式到服务提供商的给的地址即可</p>
<pre><code><span class="preprocessor"># Hexo Configuration</span>
<span class="preprocessor">## Docs: http://hexo.io/docs/configuration.html</span>
<span class="preprocessor">## Source: https://github.com/hexojs/hexo/</span>

<span class="preprocessor"># Site</span>
<span class="label">title:</span> FLY <span class="keyword">in</span> Light <span class="preprocessor">#博客标题</span>
<span class="label">subtitle:</span> <span class="preprocessor">#博客副标题</span>
<span class="label">description:</span> 有梦为马,随处可栖. <span class="preprocessor">#博客描述</span>
<span class="label">author:</span> 睡着的咖啡豆zZ <span class="preprocessor">#作者名</span>
<span class="label">email:</span> casafang2015@gmail.com <span class="preprocessor">#email地址</span>
<span class="label">language:</span> <span class="built_in">zh</span>-Hans <span class="preprocessor">#语言</span>
<span class="label">timezone:</span> <span class="preprocessor">#时区</span>
<span class="label">avatar:</span> /images/cafebean.jpg <span class="preprocessor">#头像</span>
<span class="label">social:</span> <span class="preprocessor">#社交链接</span>
 gitHub: https://github.com/CasaFang

<span class="preprocessor"># URL</span>
<span class="preprocessor">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span>
<span class="label">url:</span> https://www.flyinlight.com <span class="preprocessor">#访问博客的地址</span>
<span class="label">root:</span> / <span class="preprocessor">#博客的根目录</span>
<span class="label">permalink:</span> :year/:month/:day/:title/ <span class="preprocessor">#博客url地址结构</span>
<span class="label">permalink_defaults:</span>

<span class="preprocessor"># Directory</span>
<span class="label">source_dir:</span> source
<span class="label">public_dir:</span> public
<span class="label">tag_dir:</span> tags
<span class="label">archive_dir:</span> archives
<span class="label">category_dir:</span> categories
<span class="label">code_dir:</span> downloads/code
<span class="label">i18n_dir:</span> :lang
<span class="label">skip_render:</span>
<span class="preprocessor"># Writing</span>
<span class="label">new_post_name:</span> :title.md <span class="preprocessor"># File name of new posts</span>
<span class="label">default_layout:</span> post
<span class="label">titlecase:</span> false <span class="preprocessor"># Transform title into titlecase</span>
<span class="label">external_link:</span> true <span class="preprocessor"># Open external links in new tab</span>
<span class="label">filename_case:</span> <span class="number">0</span>
<span class="label">render_drafts:</span> false
<span class="label">post_asset_folder:</span> false
<span class="label">relative_link:</span> false
<span class="label">future:</span> true
<span class="label">highlight:</span>
  enable: true
  line_number: true
  auto_detect: true
  tab_replace:

<span class="preprocessor"># Category &amp; Tag</span>
<span class="label">default_category:</span> uncategorized
<span class="label">category_map:</span>
<span class="label">tag_map:</span>

<span class="preprocessor"># Date / Time format</span>
<span class="preprocessor">## Hexo uses Moment.js to parse and display date</span>
<span class="preprocessor">## You can customize the date format as defined in</span>
<span class="preprocessor">## http://momentjs.com/docs/#/displaying/format/</span>
<span class="label">date_format:</span> YYYY-MM-DD
<span class="label">time_format:</span> HH:mm:ss

<span class="preprocessor"># Pagination</span>
<span class="preprocessor">## Set per_page to 0 to disable pagination</span>
<span class="label">per_page:</span> <span class="number">10</span>
<span class="label">pagination_dir:</span> page

<span class="preprocessor"># Extensions</span>
<span class="preprocessor">## Plugins: http://hexo.io/plugins/</span>
<span class="preprocessor">## Themes: http://hexo.io/themes/</span>
<span class="label">theme:</span> next

<span class="preprocessor"># Deployment</span>
<span class="preprocessor">## Docs: http://hexo.io/docs/deployment.html</span>
<span class="label">deploy:</span>
  type: git
  repo: https://github.com/CasaFang/casafang.github.io.git
</code></pre><h4 id="Hexo主题设置">Hexo主题设置</h4><p>同样编辑主题文件夹的<code>_config.yml</code></p>
<pre><code><span class="preprocessor"># when running hexo in a subdirectory (e.g. domain.tld/blog), remove leading slashes ( "/archives" -&gt; "archives" )</span>
menu:
  home: /
  #categories: /categories
  #about: /about
  archives: /archives
  tags: /tags
  #commonweal: /<span class="number">404.</span>html

<span class="preprocessor"># Place your favicon.ico to /source directory.</span>
favicon: /favicon.ico

<span class="preprocessor"># Set default keywords (Use a comma to separate)</span>
keywords: <span class="string">"Hexo,next"</span>

<span class="preprocessor"># Set rss to false to disable feed link.</span>
<span class="preprocessor"># Leave rss as empty to use site's feed link.</span>
<span class="preprocessor"># Set rss to specific value if you have burned your feed already.</span>
rss: <span class="literal">false</span>

<span class="preprocessor"># Icon fonts</span>
<span class="preprocessor"># Place your font into next/source/fonts, specify directory-name and font-name here</span>
<span class="preprocessor"># Avialable: default | linecons | fifty-shades | feather</span>
icon_font: <span class="keyword">default</span>
<span class="preprocessor">#icon_font: fifty-shades</span>
<span class="preprocessor">#icon_font: feather</span>
<span class="preprocessor">#icon_font: linecons</span>

<span class="preprocessor"># Code Highlight theme</span>
<span class="preprocessor"># Available value: normal | night | night eighties | night blue | night bright</span>
<span class="preprocessor"># https://github.com/chriskempson/tomorrow-theme</span>
highlight_theme: normal


<span class="preprocessor"># MathJax Support</span>
mathjax:


<span class="preprocessor"># Schemes</span>
scheme: Mist


<span class="preprocessor"># Sidebar, available value:</span>
<span class="preprocessor">#  - post    expand on posts automatically. Default.</span>
<span class="preprocessor">#  - always  expand for all pages automatically</span>
<span class="preprocessor">#  - hide    expand only when click on the sidebar toggle icon.</span>
sidebar: post
<span class="preprocessor">#sidebar: always</span>
<span class="preprocessor">#sidebar: hide</span>


<span class="preprocessor"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</span>
scroll_to_more: <span class="literal">true</span>


<span class="preprocessor"># Automatically add list number to toc.</span>
toc_list_number: <span class="literal">true</span>

<span class="preprocessor"># Automatically Excerpt</span>
auto_excerpt:
  enable: <span class="literal">false</span>
  length: <span class="number">150</span>

<span class="preprocessor"># Use Lato font</span>
<span class="preprocessor"># Note: this option is avialable only when the language is not `zh-Hans`</span>
use_font_lato: <span class="literal">true</span>

<span class="preprocessor"># Make duoshuo show UA</span>
<span class="preprocessor"># user_id must NOT be null when admin_enable is true!</span>
<span class="preprocessor"># you can visit http://dev.duoshuo.com get duoshuo user id.</span>
duoshuo_info:
  ua_enable: <span class="literal">true</span>
  admin_enable: <span class="literal">false</span>
  user_id: <span class="number">0</span>

<span class="preprocessor">## DO NOT EDIT THE FOLLOWING SETTINGS</span>
<span class="preprocessor">## UNLESS YOU KNOW WHAT YOU ARE DOING</span>

<span class="preprocessor"># Use velocity to animate everything.</span>
use_motion: <span class="literal">true</span>

<span class="preprocessor"># Fancybox</span>
fancybox: <span class="literal">true</span>

<span class="preprocessor"># Static files</span>
vendors: vendors
css: css
js: js
images: images

<span class="preprocessor"># Theme version</span>
version: <span class="number">0.4</span><span class="number">.5</span><span class="number">.1</span>
</code></pre><h3 id="写文章">写文章</h3><p>执行new命令，生成指定名称的文章至hexo\source_posts\postName.md。</p>
<pre><code>hexo <span class="keyword">new</span> [layout] <span class="string">"postName"</span> <span class="preprocessor">#新建文章</span>
</code></pre><p>其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\scaffolds\post.md。</p>
<pre><code>title: { { title } }
date: { { date } }
<span class="header">tags:
---</span>
</code></pre><blockquote>
<p>请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。</p>
</blockquote>
<p>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：</p>
<pre><code>title: { { title } }
date: { { date } }
categories: 
<span class="header">tags: 
---</span>
</code></pre><p>postName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。</p>
<blockquote>
<p>注意，所有文件：后面都必须有个空格，不然会报错。</p>
</blockquote>
<p>看一下刚才生成的文件hexo\source_posts\postName.md，内容如下：</p>
<pre><code>title: postName <span class="preprocessor">#文章页面上的显示名称，可以任意修改，不会出现在URL中</span>
date: <span class="number">2013</span>-<span class="number">12</span>-<span class="number">02</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">16</span> <span class="preprocessor">#文章生成时间，一般不改，当然也可以任意修改</span>
categories: <span class="preprocessor">#文章分类目录，可以为空，注意:后面有个空格</span>
tags: <span class="preprocessor">#文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格</span>
---
这里开始使用markdown格式输入你的正文。
</code></pre><p>接下来，你就可以用喜爱的编辑器尽情书写你的文章。关于markdown语法，可以参考<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown语法</a>。</p>
<h4 id="fancybox">fancybox</h4><p>可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。<br>很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片：</p>
<pre><code><span class="string">layout:</span> photo
<span class="string">title:</span> 我的阅历
<span class="string">date:</span> <span class="number">2085</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">07</span>:<span class="number">33</span>:<span class="number">44</span>
<span class="string">tags:</span> [hexo]
<span class="string">photos:</span>
- <span class="string">http:</span><span class="comment">//bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg</span>
- <span class="string">http:</span><span class="comment">//bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg</span>
</code></pre><blockquote>
<p>经过测试，文件头上的layout: photo可以省略。</p>
</blockquote>
<p>不想每次都手动添加怎么办？同样的，打开您的hexo\scaffolds\photo.md</p>
<pre><code>layout: { { layout } }
title: { { title } }
date: { { date } }
tags: 
photos: 
<span class="header">- 
---</span>
</code></pre><p>然后每次可以执行带layout的new命令生成照片文章：</p>
<pre><code>hexo <span class="keyword">new</span> photo <span class="string">"photoPostName"</span> <span class="preprocessor">#新建照片文章</span>
</code></pre><h4 id="description">description</h4><p>markdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文_config.yml的介绍。</p>
<pre><code>title: hexo你的博客
date: 2013-11-22 17:11:54
categories: default
tags: [hexo]
<span class="header">description: 你对本页的描述
---</span>
</code></pre><blockquote>
<p>hexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。</p>
</blockquote>
<h4 id="文章摘要">文章摘要</h4><p>在需要显示摘要的地方添加如下代码即可：</p>
<pre><code>以上是摘要
<span class="comment">&lt;!--more--&gt;</span>
以下是余下全文
</code></pre><p>more以上内容即是文章摘要，在主页显示，more以下内容点击『&gt; Read More』链接打开全文才显示。</p>
<blockquote>
<p>hexo中所有文件的编码格式均是UTF-8。</p>
</blockquote>
<h3 id="4-Hexo部署方法">4.Hexo部署方法</h3><p>写完文章之后 就可以启动本地服务器测试了</p>
<pre><code>hexo <span class="keyword">server</span>
</code></pre><p>这个时候hexo启动localhost的4000端口 静态的网站架设完成</p>
<h3 id="5-命令行使用">5.命令行使用</h3><p>常用命令：</p>
<pre><code>hexo help <span class="preprocessor">#查看帮助</span>
hexo init <span class="preprocessor">#初始化一个目录</span>
hexo <span class="keyword">new</span> <span class="string">"postName"</span> <span class="preprocessor">#新建文章</span>
hexo <span class="keyword">new</span> page <span class="string">"pageName"</span> <span class="preprocessor">#新建页面</span>
hexo generate <span class="preprocessor">#生成网页，可以在 public 目录查看整个网站的文件</span>
hexo <span class="keyword">server</span> <span class="preprocessor">#本地预览，'Ctrl+C'关闭</span>
hexo deploy <span class="preprocessor">#部署.deploy目录</span>
hexo clean <span class="preprocessor">#清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**</span>
</code></pre><p>复合命令：</p>
<pre><code>hexo deploy -<span class="keyword">g</span>
hexo server -<span class="keyword">g</span>
</code></pre><p>简写：</p>
<pre><code>hexo <span class="keyword">n</span> == hexo new
hexo <span class="keyword">g</span> == hexo <span class="keyword">generate</span>
hexo s == hexo server
hexo <span class="keyword">d</span> == hexo deploy
</code></pre><p>安装插件，<plugin-name>为插件名</plugin-name></p>
<pre><code>npm <span class="operator"><span class="keyword">install</span> &lt;<span class="keyword">plugin</span>-<span class="keyword">name</span>&gt; <span class="comment">--save</span>
npm <span class="keyword">update</span> #升级
npm <span class="keyword">uninstall</span> &lt;<span class="keyword">plugin</span>-<span class="keyword">name</span>&gt; #卸载</span>
</code></pre><p>安装主题，<repository>为主题的 git 仓库，<theme-name>为要存放在本地的目录名</theme-name></repository></p>
<pre><code>git clone <span class="tag">&lt;<span class="title">repository</span>&gt;</span> themes/<span class="tag">&lt;<span class="title">theme-name</span>&gt;</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>一直想抽时间搭建一个自己的Hexo博客，苦于没有时间。今天这个念头又冒了出来，于是抽了些时间搭建了这个博客。作为一枚爱写文又追求逼格的程序猿，hexo的风格我非常喜欢。那么新博的第一篇就献给它。<br>]]>
    
    </summary>
    
      <category term="blog" scheme="https://www.flyinlight.com/tags/blog/"/>
    
      <category term="hexo" scheme="https://www.flyinlight.com/tags/hexo/"/>
    
      <category term="hexo" scheme="https://www.flyinlight.com/categories/hexo/"/>
    
  </entry>
  
</feed>
